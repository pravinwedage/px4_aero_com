// Generated by gencpp from file px4_command/AuxiliaryState_singleUAV.msg
// DO NOT EDIT!


#ifndef PX4_COMMAND_MESSAGE_AUXILIARYSTATE_SINGLEUAV_H
#define PX4_COMMAND_MESSAGE_AUXILIARYSTATE_SINGLEUAV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace px4_command
{
template <class ContainerAllocator>
struct AuxiliaryState_singleUAV_
{
  typedef AuxiliaryState_singleUAV_<ContainerAllocator> Type;

  AuxiliaryState_singleUAV_()
    : header()
    , W_x(0.0)
    , W_y(0.0)
    , W_z(0.0)
    , q_0(0.0)
    , q_1(0.0)
    , q_2(0.0)
    , q_3(0.0)
    , r_x(0.0)
    , r_y(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , pos_error_x(0.0)
    , pos_error_y(0.0)
    , pos_error_z(0.0)
    , vel_error_x(0.0)
    , vel_error_y(0.0)
    , vel_error_z(0.0)
    , Lm_x(0.0)
    , Lm_y(0.0)
    , Lm_z(0.0)
    , Vpm_x(0.0)
    , Vpm_y(0.0)
    , Vpm_z(0.0)
    , fL_x(0.0)
    , fL_y(0.0)
    , fL_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)  {
    }
  AuxiliaryState_singleUAV_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , W_x(0.0)
    , W_y(0.0)
    , W_z(0.0)
    , q_0(0.0)
    , q_1(0.0)
    , q_2(0.0)
    , q_3(0.0)
    , r_x(0.0)
    , r_y(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , pos_error_x(0.0)
    , pos_error_y(0.0)
    , pos_error_z(0.0)
    , vel_error_x(0.0)
    , vel_error_y(0.0)
    , vel_error_z(0.0)
    , Lm_x(0.0)
    , Lm_y(0.0)
    , Lm_z(0.0)
    , Vpm_x(0.0)
    , Vpm_y(0.0)
    , Vpm_z(0.0)
    , fL_x(0.0)
    , fL_y(0.0)
    , fL_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _W_x_type;
  _W_x_type W_x;

   typedef float _W_y_type;
  _W_y_type W_y;

   typedef float _W_z_type;
  _W_z_type W_z;

   typedef float _q_0_type;
  _q_0_type q_0;

   typedef float _q_1_type;
  _q_1_type q_1;

   typedef float _q_2_type;
  _q_2_type q_2;

   typedef float _q_3_type;
  _q_3_type q_3;

   typedef float _r_x_type;
  _r_x_type r_x;

   typedef float _r_y_type;
  _r_y_type r_y;

   typedef float _v_x_type;
  _v_x_type v_x;

   typedef float _v_y_type;
  _v_y_type v_y;

   typedef float _pos_error_x_type;
  _pos_error_x_type pos_error_x;

   typedef float _pos_error_y_type;
  _pos_error_y_type pos_error_y;

   typedef float _pos_error_z_type;
  _pos_error_z_type pos_error_z;

   typedef float _vel_error_x_type;
  _vel_error_x_type vel_error_x;

   typedef float _vel_error_y_type;
  _vel_error_y_type vel_error_y;

   typedef float _vel_error_z_type;
  _vel_error_z_type vel_error_z;

   typedef float _Lm_x_type;
  _Lm_x_type Lm_x;

   typedef float _Lm_y_type;
  _Lm_y_type Lm_y;

   typedef float _Lm_z_type;
  _Lm_z_type Lm_z;

   typedef float _Vpm_x_type;
  _Vpm_x_type Vpm_x;

   typedef float _Vpm_y_type;
  _Vpm_y_type Vpm_y;

   typedef float _Vpm_z_type;
  _Vpm_z_type Vpm_z;

   typedef float _fL_x_type;
  _fL_x_type fL_x;

   typedef float _fL_y_type;
  _fL_y_type fL_y;

   typedef float _fL_z_type;
  _fL_z_type fL_z;

   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _acc_z_type;
  _acc_z_type acc_z;





  typedef boost::shared_ptr< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> const> ConstPtr;

}; // struct AuxiliaryState_singleUAV_

typedef ::px4_command::AuxiliaryState_singleUAV_<std::allocator<void> > AuxiliaryState_singleUAV;

typedef boost::shared_ptr< ::px4_command::AuxiliaryState_singleUAV > AuxiliaryState_singleUAVPtr;
typedef boost::shared_ptr< ::px4_command::AuxiliaryState_singleUAV const> AuxiliaryState_singleUAVConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator1> & lhs, const ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.W_x == rhs.W_x &&
    lhs.W_y == rhs.W_y &&
    lhs.W_z == rhs.W_z &&
    lhs.q_0 == rhs.q_0 &&
    lhs.q_1 == rhs.q_1 &&
    lhs.q_2 == rhs.q_2 &&
    lhs.q_3 == rhs.q_3 &&
    lhs.r_x == rhs.r_x &&
    lhs.r_y == rhs.r_y &&
    lhs.v_x == rhs.v_x &&
    lhs.v_y == rhs.v_y &&
    lhs.pos_error_x == rhs.pos_error_x &&
    lhs.pos_error_y == rhs.pos_error_y &&
    lhs.pos_error_z == rhs.pos_error_z &&
    lhs.vel_error_x == rhs.vel_error_x &&
    lhs.vel_error_y == rhs.vel_error_y &&
    lhs.vel_error_z == rhs.vel_error_z &&
    lhs.Lm_x == rhs.Lm_x &&
    lhs.Lm_y == rhs.Lm_y &&
    lhs.Lm_z == rhs.Lm_z &&
    lhs.Vpm_x == rhs.Vpm_x &&
    lhs.Vpm_y == rhs.Vpm_y &&
    lhs.Vpm_z == rhs.Vpm_z &&
    lhs.fL_x == rhs.fL_x &&
    lhs.fL_y == rhs.fL_y &&
    lhs.fL_z == rhs.fL_z &&
    lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator1> & lhs, const ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px4_command

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4cd88776d99f67ca0213fb4ed41412c";
  }

  static const char* value(const ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4cd88776d99f67cULL;
  static const uint64_t static_value2 = 0xa0213fb4ed41412cULL;
};

template<class ContainerAllocator>
struct DataType< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px4_command/AuxiliaryState_singleUAV";
  }

  static const char* value(const ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## the estimated disturbances\n"
"float32  W_x    ## [N]\n"
"float32  W_y    ## [N]\n"
"float32  W_z    ## [N] \n"
"\n"
"## quadrotor attitude\n"
"float32  q_0     ## \n"
"float32  q_1     ##\n"
"float32  q_2     ##\n"
"float32  q_3     ##\n"
"\n"
"## cable motion\n"
"float32  r_x    ## [m]\n"
"float32  r_y    ## [m]\n"
"\n"
"float32  v_x    ## [m]\n"
"float32  v_y    ## [m]\n"
"\n"
"## tracking errors\n"
"float32  pos_error_x ## [m]\n"
"float32  pos_error_y ## [m]\n"
"float32  pos_error_z ## [m]\n"
"\n"
"float32  vel_error_x  ## [m/s]\n"
"float32  vel_error_y  ## [m/s]\n"
"float32  vel_error_z  ## [m/s]\n"
"\n"
"## payload position measurement from mocap\n"
"float32  Lm_x    ## [m]\n"
"float32  Lm_y    ## [m]\n"
"float32  Lm_z    ## [m]\n"
"\n"
"## payload position measurement from mocap\n"
"float32  Vpm_x   ## [m/s]\n"
"float32  Vpm_y   ## [m/s]\n"
"float32  Vpm_z   ## [m/s]\n"
"\n"
"## the  command lift \n"
"float32  fL_x     ##\n"
"float32  fL_y     ##\n"
"float32  fL_z     ##\n"
"\n"
"## the quadrotor inerital acceleration\n"
"float32  acc_x  ##\n"
"float32  acc_y  ##\n"
"float32  acc_z  ##\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.W_x);
      stream.next(m.W_y);
      stream.next(m.W_z);
      stream.next(m.q_0);
      stream.next(m.q_1);
      stream.next(m.q_2);
      stream.next(m.q_3);
      stream.next(m.r_x);
      stream.next(m.r_y);
      stream.next(m.v_x);
      stream.next(m.v_y);
      stream.next(m.pos_error_x);
      stream.next(m.pos_error_y);
      stream.next(m.pos_error_z);
      stream.next(m.vel_error_x);
      stream.next(m.vel_error_y);
      stream.next(m.vel_error_z);
      stream.next(m.Lm_x);
      stream.next(m.Lm_y);
      stream.next(m.Lm_z);
      stream.next(m.Vpm_x);
      stream.next(m.Vpm_y);
      stream.next(m.Vpm_z);
      stream.next(m.fL_x);
      stream.next(m.fL_y);
      stream.next(m.fL_z);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AuxiliaryState_singleUAV_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px4_command::AuxiliaryState_singleUAV_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "W_x: ";
    Printer<float>::stream(s, indent + "  ", v.W_x);
    s << indent << "W_y: ";
    Printer<float>::stream(s, indent + "  ", v.W_y);
    s << indent << "W_z: ";
    Printer<float>::stream(s, indent + "  ", v.W_z);
    s << indent << "q_0: ";
    Printer<float>::stream(s, indent + "  ", v.q_0);
    s << indent << "q_1: ";
    Printer<float>::stream(s, indent + "  ", v.q_1);
    s << indent << "q_2: ";
    Printer<float>::stream(s, indent + "  ", v.q_2);
    s << indent << "q_3: ";
    Printer<float>::stream(s, indent + "  ", v.q_3);
    s << indent << "r_x: ";
    Printer<float>::stream(s, indent + "  ", v.r_x);
    s << indent << "r_y: ";
    Printer<float>::stream(s, indent + "  ", v.r_y);
    s << indent << "v_x: ";
    Printer<float>::stream(s, indent + "  ", v.v_x);
    s << indent << "v_y: ";
    Printer<float>::stream(s, indent + "  ", v.v_y);
    s << indent << "pos_error_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_error_x);
    s << indent << "pos_error_y: ";
    Printer<float>::stream(s, indent + "  ", v.pos_error_y);
    s << indent << "pos_error_z: ";
    Printer<float>::stream(s, indent + "  ", v.pos_error_z);
    s << indent << "vel_error_x: ";
    Printer<float>::stream(s, indent + "  ", v.vel_error_x);
    s << indent << "vel_error_y: ";
    Printer<float>::stream(s, indent + "  ", v.vel_error_y);
    s << indent << "vel_error_z: ";
    Printer<float>::stream(s, indent + "  ", v.vel_error_z);
    s << indent << "Lm_x: ";
    Printer<float>::stream(s, indent + "  ", v.Lm_x);
    s << indent << "Lm_y: ";
    Printer<float>::stream(s, indent + "  ", v.Lm_y);
    s << indent << "Lm_z: ";
    Printer<float>::stream(s, indent + "  ", v.Lm_z);
    s << indent << "Vpm_x: ";
    Printer<float>::stream(s, indent + "  ", v.Vpm_x);
    s << indent << "Vpm_y: ";
    Printer<float>::stream(s, indent + "  ", v.Vpm_y);
    s << indent << "Vpm_z: ";
    Printer<float>::stream(s, indent + "  ", v.Vpm_z);
    s << indent << "fL_x: ";
    Printer<float>::stream(s, indent + "  ", v.fL_x);
    s << indent << "fL_y: ";
    Printer<float>::stream(s, indent + "  ", v.fL_y);
    s << indent << "fL_z: ";
    Printer<float>::stream(s, indent + "  ", v.fL_z);
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.acc_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX4_COMMAND_MESSAGE_AUXILIARYSTATE_SINGLEUAV_H
