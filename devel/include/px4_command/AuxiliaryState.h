// Generated by gencpp from file px4_command/AuxiliaryState.msg
// DO NOT EDIT!


#ifndef PX4_COMMAND_MESSAGE_AUXILIARYSTATE_H
#define PX4_COMMAND_MESSAGE_AUXILIARYSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace px4_command
{
template <class ContainerAllocator>
struct AuxiliaryState_
{
  typedef AuxiliaryState_<ContainerAllocator> Type;

  AuxiliaryState_()
    : header()
    , q_0(0.0)
    , q_1(0.0)
    , q_2(0.0)
    , q_3(0.0)
    , r_jx(0.0)
    , r_jy(0.0)
    , v_jx(0.0)
    , v_jy(0.0)
    , L_measured(0.0)
    , pos_error_x(0.0)
    , pos_error_y(0.0)
    , pos_error_z(0.0)
    , angle_error_x(0.0)
    , angle_error_y(0.0)
    , angle_error_z(0.0)
    , Euler_roll(0.0)
    , Euler_pitch(0.0)
    , Euler_yaw(0.0)
    , fLj_x(0.0)
    , fLj_y(0.0)
    , fLj_z(0.0)
    , Delta_jp_x(0.0)
    , Delta_jp_y(0.0)
    , Delta_jp_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , rd_jx(0.0)
    , rd_jy(0.0)  {
    }
  AuxiliaryState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , q_0(0.0)
    , q_1(0.0)
    , q_2(0.0)
    , q_3(0.0)
    , r_jx(0.0)
    , r_jy(0.0)
    , v_jx(0.0)
    , v_jy(0.0)
    , L_measured(0.0)
    , pos_error_x(0.0)
    , pos_error_y(0.0)
    , pos_error_z(0.0)
    , angle_error_x(0.0)
    , angle_error_y(0.0)
    , angle_error_z(0.0)
    , Euler_roll(0.0)
    , Euler_pitch(0.0)
    , Euler_yaw(0.0)
    , fLj_x(0.0)
    , fLj_y(0.0)
    , fLj_z(0.0)
    , Delta_jp_x(0.0)
    , Delta_jp_y(0.0)
    , Delta_jp_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , rd_jx(0.0)
    , rd_jy(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _q_0_type;
  _q_0_type q_0;

   typedef float _q_1_type;
  _q_1_type q_1;

   typedef float _q_2_type;
  _q_2_type q_2;

   typedef float _q_3_type;
  _q_3_type q_3;

   typedef float _r_jx_type;
  _r_jx_type r_jx;

   typedef float _r_jy_type;
  _r_jy_type r_jy;

   typedef float _v_jx_type;
  _v_jx_type v_jx;

   typedef float _v_jy_type;
  _v_jy_type v_jy;

   typedef float _L_measured_type;
  _L_measured_type L_measured;

   typedef float _pos_error_x_type;
  _pos_error_x_type pos_error_x;

   typedef float _pos_error_y_type;
  _pos_error_y_type pos_error_y;

   typedef float _pos_error_z_type;
  _pos_error_z_type pos_error_z;

   typedef float _angle_error_x_type;
  _angle_error_x_type angle_error_x;

   typedef float _angle_error_y_type;
  _angle_error_y_type angle_error_y;

   typedef float _angle_error_z_type;
  _angle_error_z_type angle_error_z;

   typedef float _Euler_roll_type;
  _Euler_roll_type Euler_roll;

   typedef float _Euler_pitch_type;
  _Euler_pitch_type Euler_pitch;

   typedef float _Euler_yaw_type;
  _Euler_yaw_type Euler_yaw;

   typedef float _fLj_x_type;
  _fLj_x_type fLj_x;

   typedef float _fLj_y_type;
  _fLj_y_type fLj_y;

   typedef float _fLj_z_type;
  _fLj_z_type fLj_z;

   typedef float _Delta_jp_x_type;
  _Delta_jp_x_type Delta_jp_x;

   typedef float _Delta_jp_y_type;
  _Delta_jp_y_type Delta_jp_y;

   typedef float _Delta_jp_z_type;
  _Delta_jp_z_type Delta_jp_z;

   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _acc_z_type;
  _acc_z_type acc_z;

   typedef float _rd_jx_type;
  _rd_jx_type rd_jx;

   typedef float _rd_jy_type;
  _rd_jy_type rd_jy;





  typedef boost::shared_ptr< ::px4_command::AuxiliaryState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px4_command::AuxiliaryState_<ContainerAllocator> const> ConstPtr;

}; // struct AuxiliaryState_

typedef ::px4_command::AuxiliaryState_<std::allocator<void> > AuxiliaryState;

typedef boost::shared_ptr< ::px4_command::AuxiliaryState > AuxiliaryStatePtr;
typedef boost::shared_ptr< ::px4_command::AuxiliaryState const> AuxiliaryStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px4_command::AuxiliaryState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px4_command::AuxiliaryState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px4_command::AuxiliaryState_<ContainerAllocator1> & lhs, const ::px4_command::AuxiliaryState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.q_0 == rhs.q_0 &&
    lhs.q_1 == rhs.q_1 &&
    lhs.q_2 == rhs.q_2 &&
    lhs.q_3 == rhs.q_3 &&
    lhs.r_jx == rhs.r_jx &&
    lhs.r_jy == rhs.r_jy &&
    lhs.v_jx == rhs.v_jx &&
    lhs.v_jy == rhs.v_jy &&
    lhs.L_measured == rhs.L_measured &&
    lhs.pos_error_x == rhs.pos_error_x &&
    lhs.pos_error_y == rhs.pos_error_y &&
    lhs.pos_error_z == rhs.pos_error_z &&
    lhs.angle_error_x == rhs.angle_error_x &&
    lhs.angle_error_y == rhs.angle_error_y &&
    lhs.angle_error_z == rhs.angle_error_z &&
    lhs.Euler_roll == rhs.Euler_roll &&
    lhs.Euler_pitch == rhs.Euler_pitch &&
    lhs.Euler_yaw == rhs.Euler_yaw &&
    lhs.fLj_x == rhs.fLj_x &&
    lhs.fLj_y == rhs.fLj_y &&
    lhs.fLj_z == rhs.fLj_z &&
    lhs.Delta_jp_x == rhs.Delta_jp_x &&
    lhs.Delta_jp_y == rhs.Delta_jp_y &&
    lhs.Delta_jp_z == rhs.Delta_jp_z &&
    lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z &&
    lhs.rd_jx == rhs.rd_jx &&
    lhs.rd_jy == rhs.rd_jy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px4_command::AuxiliaryState_<ContainerAllocator1> & lhs, const ::px4_command::AuxiliaryState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px4_command

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px4_command::AuxiliaryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_command::AuxiliaryState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_command::AuxiliaryState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_command::AuxiliaryState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_command::AuxiliaryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_command::AuxiliaryState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px4_command::AuxiliaryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bef9dbc2ce246f94ec35942903155d4";
  }

  static const char* value(const ::px4_command::AuxiliaryState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bef9dbc2ce246f9ULL;
  static const uint64_t static_value2 = 0x4ec35942903155d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::px4_command::AuxiliaryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px4_command/AuxiliaryState";
  }

  static const char* value(const ::px4_command::AuxiliaryState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px4_command::AuxiliaryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## quadrotor attitude\n"
"\n"
"float32  q_0     ##\n"
"float32  q_1     ##\n"
"float32  q_2     ##\n"
"float32  q_3     ##\n"
"\n"
"float32  r_jx    ## [m]\n"
"float32  r_jy    ## [m]\n"
"\n"
"float32  v_jx    ## [m]\n"
"float32  v_jy    ## [m]\n"
"\n"
"float32  L_measured ## [m] measured L from mocap system\n"
"\n"
"## payload pos error\n"
"\n"
"float32  pos_error_x ## [m]\n"
"float32  pos_error_y ## [m]\n"
"float32  pos_error_z ## [m]\n"
"\n"
"float32  angle_error_x  ## \n"
"float32  angle_error_y  ## \n"
"float32  angle_error_z  ## \n"
"\n"
"## quadrotor euler angle\n"
"\n"
"float32  Euler_roll     ##\n"
"float32  Euler_pitch    ##\n"
"float32  Euler_yaw      ##\n"
"\n"
"float32  fLj_x  ## [N]\n"
"float32  fLj_y  ## [N]\n"
"float32  fLj_z  ## [N]\n"
"\n"
"float32  Delta_jp_x ## [N]\n"
"float32  Delta_jp_y ## [N]\n"
"float32  Delta_jp_z ## [N]\n"
"\n"
"float32  acc_x  ##\n"
"float32  acc_y  ##\n"
"float32  acc_z  ##\n"
"\n"
"float32  rd_jx  ## \n"
"float32  rd_jy  ##\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::px4_command::AuxiliaryState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px4_command::AuxiliaryState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.q_0);
      stream.next(m.q_1);
      stream.next(m.q_2);
      stream.next(m.q_3);
      stream.next(m.r_jx);
      stream.next(m.r_jy);
      stream.next(m.v_jx);
      stream.next(m.v_jy);
      stream.next(m.L_measured);
      stream.next(m.pos_error_x);
      stream.next(m.pos_error_y);
      stream.next(m.pos_error_z);
      stream.next(m.angle_error_x);
      stream.next(m.angle_error_y);
      stream.next(m.angle_error_z);
      stream.next(m.Euler_roll);
      stream.next(m.Euler_pitch);
      stream.next(m.Euler_yaw);
      stream.next(m.fLj_x);
      stream.next(m.fLj_y);
      stream.next(m.fLj_z);
      stream.next(m.Delta_jp_x);
      stream.next(m.Delta_jp_y);
      stream.next(m.Delta_jp_z);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.rd_jx);
      stream.next(m.rd_jy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AuxiliaryState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px4_command::AuxiliaryState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px4_command::AuxiliaryState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "q_0: ";
    Printer<float>::stream(s, indent + "  ", v.q_0);
    s << indent << "q_1: ";
    Printer<float>::stream(s, indent + "  ", v.q_1);
    s << indent << "q_2: ";
    Printer<float>::stream(s, indent + "  ", v.q_2);
    s << indent << "q_3: ";
    Printer<float>::stream(s, indent + "  ", v.q_3);
    s << indent << "r_jx: ";
    Printer<float>::stream(s, indent + "  ", v.r_jx);
    s << indent << "r_jy: ";
    Printer<float>::stream(s, indent + "  ", v.r_jy);
    s << indent << "v_jx: ";
    Printer<float>::stream(s, indent + "  ", v.v_jx);
    s << indent << "v_jy: ";
    Printer<float>::stream(s, indent + "  ", v.v_jy);
    s << indent << "L_measured: ";
    Printer<float>::stream(s, indent + "  ", v.L_measured);
    s << indent << "pos_error_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_error_x);
    s << indent << "pos_error_y: ";
    Printer<float>::stream(s, indent + "  ", v.pos_error_y);
    s << indent << "pos_error_z: ";
    Printer<float>::stream(s, indent + "  ", v.pos_error_z);
    s << indent << "angle_error_x: ";
    Printer<float>::stream(s, indent + "  ", v.angle_error_x);
    s << indent << "angle_error_y: ";
    Printer<float>::stream(s, indent + "  ", v.angle_error_y);
    s << indent << "angle_error_z: ";
    Printer<float>::stream(s, indent + "  ", v.angle_error_z);
    s << indent << "Euler_roll: ";
    Printer<float>::stream(s, indent + "  ", v.Euler_roll);
    s << indent << "Euler_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Euler_pitch);
    s << indent << "Euler_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.Euler_yaw);
    s << indent << "fLj_x: ";
    Printer<float>::stream(s, indent + "  ", v.fLj_x);
    s << indent << "fLj_y: ";
    Printer<float>::stream(s, indent + "  ", v.fLj_y);
    s << indent << "fLj_z: ";
    Printer<float>::stream(s, indent + "  ", v.fLj_z);
    s << indent << "Delta_jp_x: ";
    Printer<float>::stream(s, indent + "  ", v.Delta_jp_x);
    s << indent << "Delta_jp_y: ";
    Printer<float>::stream(s, indent + "  ", v.Delta_jp_y);
    s << indent << "Delta_jp_z: ";
    Printer<float>::stream(s, indent + "  ", v.Delta_jp_z);
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.acc_z);
    s << indent << "rd_jx: ";
    Printer<float>::stream(s, indent + "  ", v.rd_jx);
    s << indent << "rd_jy: ";
    Printer<float>::stream(s, indent + "  ", v.rd_jy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX4_COMMAND_MESSAGE_AUXILIARYSTATE_H
