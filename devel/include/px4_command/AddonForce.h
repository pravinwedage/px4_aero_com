// Generated by gencpp from file px4_command/AddonForce.msg
// DO NOT EDIT!


#ifndef PX4_COMMAND_MESSAGE_ADDONFORCE_H
#define PX4_COMMAND_MESSAGE_ADDONFORCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace px4_command
{
template <class ContainerAllocator>
struct AddonForce_
{
  typedef AddonForce_<ContainerAllocator> Type;

  AddonForce_()
    : header()
    , delta_Tx(0.0)
    , delta_Ty(0.0)
    , delta_Tz(0.0)
    , delta_Rx(0.0)
    , delta_Ry(0.0)
    , delta_Rz(0.0)
    , R_1x(0.0)
    , R_1y(0.0)
    , R_1z(0.0)
    , R_2x(0.0)
    , R_2y(0.0)
    , R_2z(0.0)
    , emergency(false)
    , perform_action(false)  {
    }
  AddonForce_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , delta_Tx(0.0)
    , delta_Ty(0.0)
    , delta_Tz(0.0)
    , delta_Rx(0.0)
    , delta_Ry(0.0)
    , delta_Rz(0.0)
    , R_1x(0.0)
    , R_1y(0.0)
    , R_1z(0.0)
    , R_2x(0.0)
    , R_2y(0.0)
    , R_2z(0.0)
    , emergency(false)
    , perform_action(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _delta_Tx_type;
  _delta_Tx_type delta_Tx;

   typedef float _delta_Ty_type;
  _delta_Ty_type delta_Ty;

   typedef float _delta_Tz_type;
  _delta_Tz_type delta_Tz;

   typedef float _delta_Rx_type;
  _delta_Rx_type delta_Rx;

   typedef float _delta_Ry_type;
  _delta_Ry_type delta_Ry;

   typedef float _delta_Rz_type;
  _delta_Rz_type delta_Rz;

   typedef float _R_1x_type;
  _R_1x_type R_1x;

   typedef float _R_1y_type;
  _R_1y_type R_1y;

   typedef float _R_1z_type;
  _R_1z_type R_1z;

   typedef float _R_2x_type;
  _R_2x_type R_2x;

   typedef float _R_2y_type;
  _R_2y_type R_2y;

   typedef float _R_2z_type;
  _R_2z_type R_2z;

   typedef uint8_t _emergency_type;
  _emergency_type emergency;

   typedef uint8_t _perform_action_type;
  _perform_action_type perform_action;





  typedef boost::shared_ptr< ::px4_command::AddonForce_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px4_command::AddonForce_<ContainerAllocator> const> ConstPtr;

}; // struct AddonForce_

typedef ::px4_command::AddonForce_<std::allocator<void> > AddonForce;

typedef boost::shared_ptr< ::px4_command::AddonForce > AddonForcePtr;
typedef boost::shared_ptr< ::px4_command::AddonForce const> AddonForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px4_command::AddonForce_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px4_command::AddonForce_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px4_command::AddonForce_<ContainerAllocator1> & lhs, const ::px4_command::AddonForce_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.delta_Tx == rhs.delta_Tx &&
    lhs.delta_Ty == rhs.delta_Ty &&
    lhs.delta_Tz == rhs.delta_Tz &&
    lhs.delta_Rx == rhs.delta_Rx &&
    lhs.delta_Ry == rhs.delta_Ry &&
    lhs.delta_Rz == rhs.delta_Rz &&
    lhs.R_1x == rhs.R_1x &&
    lhs.R_1y == rhs.R_1y &&
    lhs.R_1z == rhs.R_1z &&
    lhs.R_2x == rhs.R_2x &&
    lhs.R_2y == rhs.R_2y &&
    lhs.R_2z == rhs.R_2z &&
    lhs.emergency == rhs.emergency &&
    lhs.perform_action == rhs.perform_action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px4_command::AddonForce_<ContainerAllocator1> & lhs, const ::px4_command::AddonForce_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px4_command

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px4_command::AddonForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_command::AddonForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_command::AddonForce_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_command::AddonForce_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_command::AddonForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_command::AddonForce_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px4_command::AddonForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a907908217e3da19e6b48770e6c4a70";
  }

  static const char* value(const ::px4_command::AddonForce_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a907908217e3da1ULL;
  static const uint64_t static_value2 = 0x9e6b48770e6c4a70ULL;
};

template<class ContainerAllocator>
struct DataType< ::px4_command::AddonForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px4_command/AddonForce";
  }

  static const char* value(const ::px4_command::AddonForce_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px4_command::AddonForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"##the total disturbance estimation\n"
"\n"
"float32  delta_Tx    ## [N]\n"
"float32  delta_Ty    ## [N]\n"
"float32  delta_Tz    ## [N] \n"
"\n"
"float32  delta_Rx    ## [N]\n"
"float32  delta_Ry    ## [N]\n"
"float32  delta_Rz    ## [N] \n"
"\n"
"## the following terms are used for different purpose for TCST and JGCD method\n"
"## for TCST, they are the cross feeding terms\n"
"## for JGCD, they are the additive mpc command\n"
"\n"
"float32  R_1x        ## [N]\n"
"float32  R_1y        ## [N]\n"
"float32  R_1z        ## [N]\n"
"\n"
"float32  R_2x        ## [N]\n"
"float32  R_2y        ## [N]\n"
"float32  R_2z        ## [N]\n"
"\n"
"bool emergency        ## flag for sending out emergency landing signal\n"
"bool perform_action   ## flag for performing action\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::px4_command::AddonForce_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px4_command::AddonForce_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.delta_Tx);
      stream.next(m.delta_Ty);
      stream.next(m.delta_Tz);
      stream.next(m.delta_Rx);
      stream.next(m.delta_Ry);
      stream.next(m.delta_Rz);
      stream.next(m.R_1x);
      stream.next(m.R_1y);
      stream.next(m.R_1z);
      stream.next(m.R_2x);
      stream.next(m.R_2y);
      stream.next(m.R_2z);
      stream.next(m.emergency);
      stream.next(m.perform_action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddonForce_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px4_command::AddonForce_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px4_command::AddonForce_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "delta_Tx: ";
    Printer<float>::stream(s, indent + "  ", v.delta_Tx);
    s << indent << "delta_Ty: ";
    Printer<float>::stream(s, indent + "  ", v.delta_Ty);
    s << indent << "delta_Tz: ";
    Printer<float>::stream(s, indent + "  ", v.delta_Tz);
    s << indent << "delta_Rx: ";
    Printer<float>::stream(s, indent + "  ", v.delta_Rx);
    s << indent << "delta_Ry: ";
    Printer<float>::stream(s, indent + "  ", v.delta_Ry);
    s << indent << "delta_Rz: ";
    Printer<float>::stream(s, indent + "  ", v.delta_Rz);
    s << indent << "R_1x: ";
    Printer<float>::stream(s, indent + "  ", v.R_1x);
    s << indent << "R_1y: ";
    Printer<float>::stream(s, indent + "  ", v.R_1y);
    s << indent << "R_1z: ";
    Printer<float>::stream(s, indent + "  ", v.R_1z);
    s << indent << "R_2x: ";
    Printer<float>::stream(s, indent + "  ", v.R_2x);
    s << indent << "R_2y: ";
    Printer<float>::stream(s, indent + "  ", v.R_2y);
    s << indent << "R_2z: ";
    Printer<float>::stream(s, indent + "  ", v.R_2z);
    s << indent << "emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency);
    s << indent << "perform_action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.perform_action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX4_COMMAND_MESSAGE_ADDONFORCE_H
