# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from px4_command/AddonForce.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AddonForce(genpy.Message):
  _md5sum = "3a907908217e3da19e6b48770e6c4a70"
  _type = "px4_command/AddonForce"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

##the total disturbance estimation

float32  delta_Tx    ## [N]
float32  delta_Ty    ## [N]
float32  delta_Tz    ## [N] 

float32  delta_Rx    ## [N]
float32  delta_Ry    ## [N]
float32  delta_Rz    ## [N] 

## the following terms are used for different purpose for TCST and JGCD method
## for TCST, they are the cross feeding terms
## for JGCD, they are the additive mpc command

float32  R_1x        ## [N]
float32  R_1y        ## [N]
float32  R_1z        ## [N]

float32  R_2x        ## [N]
float32  R_2y        ## [N]
float32  R_2z        ## [N]

bool emergency        ## flag for sending out emergency landing signal
bool perform_action   ## flag for performing action
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','delta_Tx','delta_Ty','delta_Tz','delta_Rx','delta_Ry','delta_Rz','R_1x','R_1y','R_1z','R_2x','R_2y','R_2z','emergency','perform_action']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,delta_Tx,delta_Ty,delta_Tz,delta_Rx,delta_Ry,delta_Rz,R_1x,R_1y,R_1z,R_2x,R_2y,R_2z,emergency,perform_action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AddonForce, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.delta_Tx is None:
        self.delta_Tx = 0.
      if self.delta_Ty is None:
        self.delta_Ty = 0.
      if self.delta_Tz is None:
        self.delta_Tz = 0.
      if self.delta_Rx is None:
        self.delta_Rx = 0.
      if self.delta_Ry is None:
        self.delta_Ry = 0.
      if self.delta_Rz is None:
        self.delta_Rz = 0.
      if self.R_1x is None:
        self.R_1x = 0.
      if self.R_1y is None:
        self.R_1y = 0.
      if self.R_1z is None:
        self.R_1z = 0.
      if self.R_2x is None:
        self.R_2x = 0.
      if self.R_2y is None:
        self.R_2y = 0.
      if self.R_2z is None:
        self.R_2z = 0.
      if self.emergency is None:
        self.emergency = False
      if self.perform_action is None:
        self.perform_action = False
    else:
      self.header = std_msgs.msg.Header()
      self.delta_Tx = 0.
      self.delta_Ty = 0.
      self.delta_Tz = 0.
      self.delta_Rx = 0.
      self.delta_Ry = 0.
      self.delta_Rz = 0.
      self.R_1x = 0.
      self.R_1y = 0.
      self.R_1z = 0.
      self.R_2x = 0.
      self.R_2y = 0.
      self.R_2z = 0.
      self.emergency = False
      self.perform_action = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12f2B().pack(_x.delta_Tx, _x.delta_Ty, _x.delta_Tz, _x.delta_Rx, _x.delta_Ry, _x.delta_Rz, _x.R_1x, _x.R_1y, _x.R_1z, _x.R_2x, _x.R_2y, _x.R_2z, _x.emergency, _x.perform_action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.delta_Tx, _x.delta_Ty, _x.delta_Tz, _x.delta_Rx, _x.delta_Ry, _x.delta_Rz, _x.R_1x, _x.R_1y, _x.R_1z, _x.R_2x, _x.R_2y, _x.R_2z, _x.emergency, _x.perform_action,) = _get_struct_12f2B().unpack(str[start:end])
      self.emergency = bool(self.emergency)
      self.perform_action = bool(self.perform_action)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12f2B().pack(_x.delta_Tx, _x.delta_Ty, _x.delta_Tz, _x.delta_Rx, _x.delta_Ry, _x.delta_Rz, _x.R_1x, _x.R_1y, _x.R_1z, _x.R_2x, _x.R_2y, _x.R_2z, _x.emergency, _x.perform_action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.delta_Tx, _x.delta_Ty, _x.delta_Tz, _x.delta_Rx, _x.delta_Ry, _x.delta_Rz, _x.R_1x, _x.R_1y, _x.R_1z, _x.R_2x, _x.R_2y, _x.R_2z, _x.emergency, _x.perform_action,) = _get_struct_12f2B().unpack(str[start:end])
      self.emergency = bool(self.emergency)
      self.perform_action = bool(self.perform_action)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f2B = None
def _get_struct_12f2B():
    global _struct_12f2B
    if _struct_12f2B is None:
        _struct_12f2B = struct.Struct("<12f2B")
    return _struct_12f2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
