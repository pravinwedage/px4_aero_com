# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from px4_command/ControlParameterRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlParameterRequest(genpy.Message):
  _md5sum = "ebfb0198b02485c9a6ec17f0c11eda7a"
  _type = "px4_command/ControlParameterRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string controllername
float32 dronemass
float32 cablelength
float32 a_j
float32 payloadmass
float32 motor_slope
float32 motor_intercept 
int32 num_drone
bool isPubAuxiliaryState
bool isAddonForcedUsed
bool isCrossFeedingTermsUsed
float32 t_jx
float32 t_jy
float32 t_jz
float32 kv_xy
float32 kv_z
float32 kR_xy
float32 kR_z
float32 kL
float32 Kphi_xy
float32 Kphi_z
float32 kr1_x
float32 kr1_y
float32 kr1_z
float32 kr2_x
float32 kr2_y
float32 kr2_z
float32 kp_x
float32 kp_y
float32 kp_z
float32 komega_x
float32 komega_y
float32 komega_z
float32 lambdaj_x
float32 lambdaj_y
float32 lambdaj_z
float32 lambda_T_x
float32 lambda_T_y
float32 lambda_T_z
float32 lambda_R_x
float32 lambda_R_y
float32 lambda_R_z
float32 lambda1_x
float32 lambda1_y
float32 lambda1_z
float32 lambda2_x
float32 lambda2_y
float32 lambda2_z
float32 pxy_error_max
float32 pz_error_max
float32 pxy_int_max
float32 pz_int_max
float32 tilt_max
float32 int_start_error
float32 fp_max_x
float32 fp_max_y
float32 fp_max_z
"""
  __slots__ = ['controllername','dronemass','cablelength','a_j','payloadmass','motor_slope','motor_intercept','num_drone','isPubAuxiliaryState','isAddonForcedUsed','isCrossFeedingTermsUsed','t_jx','t_jy','t_jz','kv_xy','kv_z','kR_xy','kR_z','kL','Kphi_xy','Kphi_z','kr1_x','kr1_y','kr1_z','kr2_x','kr2_y','kr2_z','kp_x','kp_y','kp_z','komega_x','komega_y','komega_z','lambdaj_x','lambdaj_y','lambdaj_z','lambda_T_x','lambda_T_y','lambda_T_z','lambda_R_x','lambda_R_y','lambda_R_z','lambda1_x','lambda1_y','lambda1_z','lambda2_x','lambda2_y','lambda2_z','pxy_error_max','pz_error_max','pxy_int_max','pz_int_max','tilt_max','int_start_error','fp_max_x','fp_max_y','fp_max_z']
  _slot_types = ['string','float32','float32','float32','float32','float32','float32','int32','bool','bool','bool','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controllername,dronemass,cablelength,a_j,payloadmass,motor_slope,motor_intercept,num_drone,isPubAuxiliaryState,isAddonForcedUsed,isCrossFeedingTermsUsed,t_jx,t_jy,t_jz,kv_xy,kv_z,kR_xy,kR_z,kL,Kphi_xy,Kphi_z,kr1_x,kr1_y,kr1_z,kr2_x,kr2_y,kr2_z,kp_x,kp_y,kp_z,komega_x,komega_y,komega_z,lambdaj_x,lambdaj_y,lambdaj_z,lambda_T_x,lambda_T_y,lambda_T_z,lambda_R_x,lambda_R_y,lambda_R_z,lambda1_x,lambda1_y,lambda1_z,lambda2_x,lambda2_y,lambda2_z,pxy_error_max,pz_error_max,pxy_int_max,pz_int_max,tilt_max,int_start_error,fp_max_x,fp_max_y,fp_max_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlParameterRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.controllername is None:
        self.controllername = ''
      if self.dronemass is None:
        self.dronemass = 0.
      if self.cablelength is None:
        self.cablelength = 0.
      if self.a_j is None:
        self.a_j = 0.
      if self.payloadmass is None:
        self.payloadmass = 0.
      if self.motor_slope is None:
        self.motor_slope = 0.
      if self.motor_intercept is None:
        self.motor_intercept = 0.
      if self.num_drone is None:
        self.num_drone = 0
      if self.isPubAuxiliaryState is None:
        self.isPubAuxiliaryState = False
      if self.isAddonForcedUsed is None:
        self.isAddonForcedUsed = False
      if self.isCrossFeedingTermsUsed is None:
        self.isCrossFeedingTermsUsed = False
      if self.t_jx is None:
        self.t_jx = 0.
      if self.t_jy is None:
        self.t_jy = 0.
      if self.t_jz is None:
        self.t_jz = 0.
      if self.kv_xy is None:
        self.kv_xy = 0.
      if self.kv_z is None:
        self.kv_z = 0.
      if self.kR_xy is None:
        self.kR_xy = 0.
      if self.kR_z is None:
        self.kR_z = 0.
      if self.kL is None:
        self.kL = 0.
      if self.Kphi_xy is None:
        self.Kphi_xy = 0.
      if self.Kphi_z is None:
        self.Kphi_z = 0.
      if self.kr1_x is None:
        self.kr1_x = 0.
      if self.kr1_y is None:
        self.kr1_y = 0.
      if self.kr1_z is None:
        self.kr1_z = 0.
      if self.kr2_x is None:
        self.kr2_x = 0.
      if self.kr2_y is None:
        self.kr2_y = 0.
      if self.kr2_z is None:
        self.kr2_z = 0.
      if self.kp_x is None:
        self.kp_x = 0.
      if self.kp_y is None:
        self.kp_y = 0.
      if self.kp_z is None:
        self.kp_z = 0.
      if self.komega_x is None:
        self.komega_x = 0.
      if self.komega_y is None:
        self.komega_y = 0.
      if self.komega_z is None:
        self.komega_z = 0.
      if self.lambdaj_x is None:
        self.lambdaj_x = 0.
      if self.lambdaj_y is None:
        self.lambdaj_y = 0.
      if self.lambdaj_z is None:
        self.lambdaj_z = 0.
      if self.lambda_T_x is None:
        self.lambda_T_x = 0.
      if self.lambda_T_y is None:
        self.lambda_T_y = 0.
      if self.lambda_T_z is None:
        self.lambda_T_z = 0.
      if self.lambda_R_x is None:
        self.lambda_R_x = 0.
      if self.lambda_R_y is None:
        self.lambda_R_y = 0.
      if self.lambda_R_z is None:
        self.lambda_R_z = 0.
      if self.lambda1_x is None:
        self.lambda1_x = 0.
      if self.lambda1_y is None:
        self.lambda1_y = 0.
      if self.lambda1_z is None:
        self.lambda1_z = 0.
      if self.lambda2_x is None:
        self.lambda2_x = 0.
      if self.lambda2_y is None:
        self.lambda2_y = 0.
      if self.lambda2_z is None:
        self.lambda2_z = 0.
      if self.pxy_error_max is None:
        self.pxy_error_max = 0.
      if self.pz_error_max is None:
        self.pz_error_max = 0.
      if self.pxy_int_max is None:
        self.pxy_int_max = 0.
      if self.pz_int_max is None:
        self.pz_int_max = 0.
      if self.tilt_max is None:
        self.tilt_max = 0.
      if self.int_start_error is None:
        self.int_start_error = 0.
      if self.fp_max_x is None:
        self.fp_max_x = 0.
      if self.fp_max_y is None:
        self.fp_max_y = 0.
      if self.fp_max_z is None:
        self.fp_max_z = 0.
    else:
      self.controllername = ''
      self.dronemass = 0.
      self.cablelength = 0.
      self.a_j = 0.
      self.payloadmass = 0.
      self.motor_slope = 0.
      self.motor_intercept = 0.
      self.num_drone = 0
      self.isPubAuxiliaryState = False
      self.isAddonForcedUsed = False
      self.isCrossFeedingTermsUsed = False
      self.t_jx = 0.
      self.t_jy = 0.
      self.t_jz = 0.
      self.kv_xy = 0.
      self.kv_z = 0.
      self.kR_xy = 0.
      self.kR_z = 0.
      self.kL = 0.
      self.Kphi_xy = 0.
      self.Kphi_z = 0.
      self.kr1_x = 0.
      self.kr1_y = 0.
      self.kr1_z = 0.
      self.kr2_x = 0.
      self.kr2_y = 0.
      self.kr2_z = 0.
      self.kp_x = 0.
      self.kp_y = 0.
      self.kp_z = 0.
      self.komega_x = 0.
      self.komega_y = 0.
      self.komega_z = 0.
      self.lambdaj_x = 0.
      self.lambdaj_y = 0.
      self.lambdaj_z = 0.
      self.lambda_T_x = 0.
      self.lambda_T_y = 0.
      self.lambda_T_z = 0.
      self.lambda_R_x = 0.
      self.lambda_R_y = 0.
      self.lambda_R_z = 0.
      self.lambda1_x = 0.
      self.lambda1_y = 0.
      self.lambda1_z = 0.
      self.lambda2_x = 0.
      self.lambda2_y = 0.
      self.lambda2_z = 0.
      self.pxy_error_max = 0.
      self.pz_error_max = 0.
      self.pxy_int_max = 0.
      self.pz_int_max = 0.
      self.tilt_max = 0.
      self.int_start_error = 0.
      self.fp_max_x = 0.
      self.fp_max_y = 0.
      self.fp_max_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.controllername
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6fi3B46f().pack(_x.dronemass, _x.cablelength, _x.a_j, _x.payloadmass, _x.motor_slope, _x.motor_intercept, _x.num_drone, _x.isPubAuxiliaryState, _x.isAddonForcedUsed, _x.isCrossFeedingTermsUsed, _x.t_jx, _x.t_jy, _x.t_jz, _x.kv_xy, _x.kv_z, _x.kR_xy, _x.kR_z, _x.kL, _x.Kphi_xy, _x.Kphi_z, _x.kr1_x, _x.kr1_y, _x.kr1_z, _x.kr2_x, _x.kr2_y, _x.kr2_z, _x.kp_x, _x.kp_y, _x.kp_z, _x.komega_x, _x.komega_y, _x.komega_z, _x.lambdaj_x, _x.lambdaj_y, _x.lambdaj_z, _x.lambda_T_x, _x.lambda_T_y, _x.lambda_T_z, _x.lambda_R_x, _x.lambda_R_y, _x.lambda_R_z, _x.lambda1_x, _x.lambda1_y, _x.lambda1_z, _x.lambda2_x, _x.lambda2_y, _x.lambda2_z, _x.pxy_error_max, _x.pz_error_max, _x.pxy_int_max, _x.pz_int_max, _x.tilt_max, _x.int_start_error, _x.fp_max_x, _x.fp_max_y, _x.fp_max_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controllername = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controllername = str[start:end]
      _x = self
      start = end
      end += 215
      (_x.dronemass, _x.cablelength, _x.a_j, _x.payloadmass, _x.motor_slope, _x.motor_intercept, _x.num_drone, _x.isPubAuxiliaryState, _x.isAddonForcedUsed, _x.isCrossFeedingTermsUsed, _x.t_jx, _x.t_jy, _x.t_jz, _x.kv_xy, _x.kv_z, _x.kR_xy, _x.kR_z, _x.kL, _x.Kphi_xy, _x.Kphi_z, _x.kr1_x, _x.kr1_y, _x.kr1_z, _x.kr2_x, _x.kr2_y, _x.kr2_z, _x.kp_x, _x.kp_y, _x.kp_z, _x.komega_x, _x.komega_y, _x.komega_z, _x.lambdaj_x, _x.lambdaj_y, _x.lambdaj_z, _x.lambda_T_x, _x.lambda_T_y, _x.lambda_T_z, _x.lambda_R_x, _x.lambda_R_y, _x.lambda_R_z, _x.lambda1_x, _x.lambda1_y, _x.lambda1_z, _x.lambda2_x, _x.lambda2_y, _x.lambda2_z, _x.pxy_error_max, _x.pz_error_max, _x.pxy_int_max, _x.pz_int_max, _x.tilt_max, _x.int_start_error, _x.fp_max_x, _x.fp_max_y, _x.fp_max_z,) = _get_struct_6fi3B46f().unpack(str[start:end])
      self.isPubAuxiliaryState = bool(self.isPubAuxiliaryState)
      self.isAddonForcedUsed = bool(self.isAddonForcedUsed)
      self.isCrossFeedingTermsUsed = bool(self.isCrossFeedingTermsUsed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.controllername
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6fi3B46f().pack(_x.dronemass, _x.cablelength, _x.a_j, _x.payloadmass, _x.motor_slope, _x.motor_intercept, _x.num_drone, _x.isPubAuxiliaryState, _x.isAddonForcedUsed, _x.isCrossFeedingTermsUsed, _x.t_jx, _x.t_jy, _x.t_jz, _x.kv_xy, _x.kv_z, _x.kR_xy, _x.kR_z, _x.kL, _x.Kphi_xy, _x.Kphi_z, _x.kr1_x, _x.kr1_y, _x.kr1_z, _x.kr2_x, _x.kr2_y, _x.kr2_z, _x.kp_x, _x.kp_y, _x.kp_z, _x.komega_x, _x.komega_y, _x.komega_z, _x.lambdaj_x, _x.lambdaj_y, _x.lambdaj_z, _x.lambda_T_x, _x.lambda_T_y, _x.lambda_T_z, _x.lambda_R_x, _x.lambda_R_y, _x.lambda_R_z, _x.lambda1_x, _x.lambda1_y, _x.lambda1_z, _x.lambda2_x, _x.lambda2_y, _x.lambda2_z, _x.pxy_error_max, _x.pz_error_max, _x.pxy_int_max, _x.pz_int_max, _x.tilt_max, _x.int_start_error, _x.fp_max_x, _x.fp_max_y, _x.fp_max_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controllername = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controllername = str[start:end]
      _x = self
      start = end
      end += 215
      (_x.dronemass, _x.cablelength, _x.a_j, _x.payloadmass, _x.motor_slope, _x.motor_intercept, _x.num_drone, _x.isPubAuxiliaryState, _x.isAddonForcedUsed, _x.isCrossFeedingTermsUsed, _x.t_jx, _x.t_jy, _x.t_jz, _x.kv_xy, _x.kv_z, _x.kR_xy, _x.kR_z, _x.kL, _x.Kphi_xy, _x.Kphi_z, _x.kr1_x, _x.kr1_y, _x.kr1_z, _x.kr2_x, _x.kr2_y, _x.kr2_z, _x.kp_x, _x.kp_y, _x.kp_z, _x.komega_x, _x.komega_y, _x.komega_z, _x.lambdaj_x, _x.lambdaj_y, _x.lambdaj_z, _x.lambda_T_x, _x.lambda_T_y, _x.lambda_T_z, _x.lambda_R_x, _x.lambda_R_y, _x.lambda_R_z, _x.lambda1_x, _x.lambda1_y, _x.lambda1_z, _x.lambda2_x, _x.lambda2_y, _x.lambda2_z, _x.pxy_error_max, _x.pz_error_max, _x.pxy_int_max, _x.pz_int_max, _x.tilt_max, _x.int_start_error, _x.fp_max_x, _x.fp_max_y, _x.fp_max_z,) = _get_struct_6fi3B46f().unpack(str[start:end])
      self.isPubAuxiliaryState = bool(self.isPubAuxiliaryState)
      self.isAddonForcedUsed = bool(self.isAddonForcedUsed)
      self.isCrossFeedingTermsUsed = bool(self.isCrossFeedingTermsUsed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6fi3B46f = None
def _get_struct_6fi3B46f():
    global _struct_6fi3B46f
    if _struct_6fi3B46f is None:
        _struct_6fi3B46f = struct.Struct("<6fi3B46f")
    return _struct_6fi3B46f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from px4_command/ControlParameterResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlParameterResponse(genpy.Message):
  _md5sum = "860a691c70e14a4dcb7ec7957ddafcce"
  _type = "px4_command/ControlParameterResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool oktostart
"""
  __slots__ = ['oktostart']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       oktostart

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlParameterResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.oktostart is None:
        self.oktostart = False
    else:
      self.oktostart = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.oktostart
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.oktostart,) = _get_struct_B().unpack(str[start:end])
      self.oktostart = bool(self.oktostart)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.oktostart
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.oktostart,) = _get_struct_B().unpack(str[start:end])
      self.oktostart = bool(self.oktostart)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ControlParameter(object):
  _type          = 'px4_command/ControlParameter'
  _md5sum = '6564e4eb6ec261394b295cdd4e73b53a'
  _request_class  = ControlParameterRequest
  _response_class = ControlParameterResponse
