# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from px4_command/AuxiliaryState_singleUAV.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AuxiliaryState_singleUAV(genpy.Message):
  _md5sum = "f4cd88776d99f67ca0213fb4ed41412c"
  _type = "px4_command/AuxiliaryState_singleUAV"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

## the estimated disturbances
float32  W_x    ## [N]
float32  W_y    ## [N]
float32  W_z    ## [N] 

## quadrotor attitude
float32  q_0     ## 
float32  q_1     ##
float32  q_2     ##
float32  q_3     ##

## cable motion
float32  r_x    ## [m]
float32  r_y    ## [m]

float32  v_x    ## [m]
float32  v_y    ## [m]

## tracking errors
float32  pos_error_x ## [m]
float32  pos_error_y ## [m]
float32  pos_error_z ## [m]

float32  vel_error_x  ## [m/s]
float32  vel_error_y  ## [m/s]
float32  vel_error_z  ## [m/s]

## payload position measurement from mocap
float32  Lm_x    ## [m]
float32  Lm_y    ## [m]
float32  Lm_z    ## [m]

## payload position measurement from mocap
float32  Vpm_x   ## [m/s]
float32  Vpm_y   ## [m/s]
float32  Vpm_z   ## [m/s]

## the  command lift 
float32  fL_x     ##
float32  fL_y     ##
float32  fL_z     ##

## the quadrotor inerital acceleration
float32  acc_x  ##
float32  acc_y  ##
float32  acc_z  ##
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','W_x','W_y','W_z','q_0','q_1','q_2','q_3','r_x','r_y','v_x','v_y','pos_error_x','pos_error_y','pos_error_z','vel_error_x','vel_error_y','vel_error_z','Lm_x','Lm_y','Lm_z','Vpm_x','Vpm_y','Vpm_z','fL_x','fL_y','fL_z','acc_x','acc_y','acc_z']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,W_x,W_y,W_z,q_0,q_1,q_2,q_3,r_x,r_y,v_x,v_y,pos_error_x,pos_error_y,pos_error_z,vel_error_x,vel_error_y,vel_error_z,Lm_x,Lm_y,Lm_z,Vpm_x,Vpm_y,Vpm_z,fL_x,fL_y,fL_z,acc_x,acc_y,acc_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AuxiliaryState_singleUAV, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.W_x is None:
        self.W_x = 0.
      if self.W_y is None:
        self.W_y = 0.
      if self.W_z is None:
        self.W_z = 0.
      if self.q_0 is None:
        self.q_0 = 0.
      if self.q_1 is None:
        self.q_1 = 0.
      if self.q_2 is None:
        self.q_2 = 0.
      if self.q_3 is None:
        self.q_3 = 0.
      if self.r_x is None:
        self.r_x = 0.
      if self.r_y is None:
        self.r_y = 0.
      if self.v_x is None:
        self.v_x = 0.
      if self.v_y is None:
        self.v_y = 0.
      if self.pos_error_x is None:
        self.pos_error_x = 0.
      if self.pos_error_y is None:
        self.pos_error_y = 0.
      if self.pos_error_z is None:
        self.pos_error_z = 0.
      if self.vel_error_x is None:
        self.vel_error_x = 0.
      if self.vel_error_y is None:
        self.vel_error_y = 0.
      if self.vel_error_z is None:
        self.vel_error_z = 0.
      if self.Lm_x is None:
        self.Lm_x = 0.
      if self.Lm_y is None:
        self.Lm_y = 0.
      if self.Lm_z is None:
        self.Lm_z = 0.
      if self.Vpm_x is None:
        self.Vpm_x = 0.
      if self.Vpm_y is None:
        self.Vpm_y = 0.
      if self.Vpm_z is None:
        self.Vpm_z = 0.
      if self.fL_x is None:
        self.fL_x = 0.
      if self.fL_y is None:
        self.fL_y = 0.
      if self.fL_z is None:
        self.fL_z = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.W_x = 0.
      self.W_y = 0.
      self.W_z = 0.
      self.q_0 = 0.
      self.q_1 = 0.
      self.q_2 = 0.
      self.q_3 = 0.
      self.r_x = 0.
      self.r_y = 0.
      self.v_x = 0.
      self.v_y = 0.
      self.pos_error_x = 0.
      self.pos_error_y = 0.
      self.pos_error_z = 0.
      self.vel_error_x = 0.
      self.vel_error_y = 0.
      self.vel_error_z = 0.
      self.Lm_x = 0.
      self.Lm_y = 0.
      self.Lm_z = 0.
      self.Vpm_x = 0.
      self.Vpm_y = 0.
      self.Vpm_z = 0.
      self.fL_x = 0.
      self.fL_y = 0.
      self.fL_z = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_29f().pack(_x.W_x, _x.W_y, _x.W_z, _x.q_0, _x.q_1, _x.q_2, _x.q_3, _x.r_x, _x.r_y, _x.v_x, _x.v_y, _x.pos_error_x, _x.pos_error_y, _x.pos_error_z, _x.vel_error_x, _x.vel_error_y, _x.vel_error_z, _x.Lm_x, _x.Lm_y, _x.Lm_z, _x.Vpm_x, _x.Vpm_y, _x.Vpm_z, _x.fL_x, _x.fL_y, _x.fL_z, _x.acc_x, _x.acc_y, _x.acc_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.W_x, _x.W_y, _x.W_z, _x.q_0, _x.q_1, _x.q_2, _x.q_3, _x.r_x, _x.r_y, _x.v_x, _x.v_y, _x.pos_error_x, _x.pos_error_y, _x.pos_error_z, _x.vel_error_x, _x.vel_error_y, _x.vel_error_z, _x.Lm_x, _x.Lm_y, _x.Lm_z, _x.Vpm_x, _x.Vpm_y, _x.Vpm_z, _x.fL_x, _x.fL_y, _x.fL_z, _x.acc_x, _x.acc_y, _x.acc_z,) = _get_struct_29f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_29f().pack(_x.W_x, _x.W_y, _x.W_z, _x.q_0, _x.q_1, _x.q_2, _x.q_3, _x.r_x, _x.r_y, _x.v_x, _x.v_y, _x.pos_error_x, _x.pos_error_y, _x.pos_error_z, _x.vel_error_x, _x.vel_error_y, _x.vel_error_z, _x.Lm_x, _x.Lm_y, _x.Lm_z, _x.Vpm_x, _x.Vpm_y, _x.Vpm_z, _x.fL_x, _x.fL_y, _x.fL_z, _x.acc_x, _x.acc_y, _x.acc_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.W_x, _x.W_y, _x.W_z, _x.q_0, _x.q_1, _x.q_2, _x.q_3, _x.r_x, _x.r_y, _x.v_x, _x.v_y, _x.pos_error_x, _x.pos_error_y, _x.pos_error_z, _x.vel_error_x, _x.vel_error_y, _x.vel_error_z, _x.Lm_x, _x.Lm_y, _x.Lm_z, _x.Vpm_x, _x.Vpm_y, _x.Vpm_z, _x.fL_x, _x.fL_y, _x.fL_z, _x.acc_x, _x.acc_y, _x.acc_z,) = _get_struct_29f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_29f = None
def _get_struct_29f():
    global _struct_29f
    if _struct_29f is None:
        _struct_29f = struct.Struct("<29f")
    return _struct_29f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
