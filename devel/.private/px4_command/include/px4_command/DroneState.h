// Generated by gencpp from file px4_command/DroneState.msg
// DO NOT EDIT!


#ifndef PX4_COMMAND_MESSAGE_DRONESTATE_H
#define PX4_COMMAND_MESSAGE_DRONESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>

namespace px4_command
{
template <class ContainerAllocator>
struct DroneState_
{
  typedef DroneState_<ContainerAllocator> Type;

  DroneState_()
    : header()
    , connected(false)
    , armed(false)
    , mode()
    , time_from_start(0.0)
    , longitude(0.0)
    , latitude(0.0)
    , position()
    , velocity()
    , attitude()
    , attitude_q()
    , attitude_rate()
    , acceleration()
    , payload_vel()
    , payload_pos()
    , payload_quaternion()
    , payload_angular_vel()
    , battery_voltage(0.0)
    , battery_remaining(0.0)
    , mocapOK(false)  {
      position.assign(0.0);

      velocity.assign(0.0);

      attitude.assign(0.0);

      attitude_rate.assign(0.0);

      acceleration.assign(0.0);

      payload_vel.assign(0.0);

      payload_pos.assign(0.0);

      payload_quaternion.assign(0.0);

      payload_angular_vel.assign(0.0);
  }
  DroneState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , connected(false)
    , armed(false)
    , mode(_alloc)
    , time_from_start(0.0)
    , longitude(0.0)
    , latitude(0.0)
    , position()
    , velocity()
    , attitude()
    , attitude_q(_alloc)
    , attitude_rate()
    , acceleration()
    , payload_vel()
    , payload_pos()
    , payload_quaternion()
    , payload_angular_vel()
    , battery_voltage(0.0)
    , battery_remaining(0.0)
    , mocapOK(false)  {
  (void)_alloc;
      position.assign(0.0);

      velocity.assign(0.0);

      attitude.assign(0.0);

      attitude_rate.assign(0.0);

      acceleration.assign(0.0);

      payload_vel.assign(0.0);

      payload_pos.assign(0.0);

      payload_quaternion.assign(0.0);

      payload_angular_vel.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _connected_type;
  _connected_type connected;

   typedef uint8_t _armed_type;
  _armed_type armed;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_type;
  _mode_type mode;

   typedef float _time_from_start_type;
  _time_from_start_type time_from_start;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef boost::array<float, 3>  _position_type;
  _position_type position;

   typedef boost::array<float, 3>  _velocity_type;
  _velocity_type velocity;

   typedef boost::array<float, 3>  _attitude_type;
  _attitude_type attitude;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _attitude_q_type;
  _attitude_q_type attitude_q;

   typedef boost::array<float, 3>  _attitude_rate_type;
  _attitude_rate_type attitude_rate;

   typedef boost::array<float, 3>  _acceleration_type;
  _acceleration_type acceleration;

   typedef boost::array<float, 3>  _payload_vel_type;
  _payload_vel_type payload_vel;

   typedef boost::array<float, 3>  _payload_pos_type;
  _payload_pos_type payload_pos;

   typedef boost::array<float, 4>  _payload_quaternion_type;
  _payload_quaternion_type payload_quaternion;

   typedef boost::array<float, 3>  _payload_angular_vel_type;
  _payload_angular_vel_type payload_angular_vel;

   typedef float _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef float _battery_remaining_type;
  _battery_remaining_type battery_remaining;

   typedef uint8_t _mocapOK_type;
  _mocapOK_type mocapOK;





  typedef boost::shared_ptr< ::px4_command::DroneState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px4_command::DroneState_<ContainerAllocator> const> ConstPtr;

}; // struct DroneState_

typedef ::px4_command::DroneState_<std::allocator<void> > DroneState;

typedef boost::shared_ptr< ::px4_command::DroneState > DroneStatePtr;
typedef boost::shared_ptr< ::px4_command::DroneState const> DroneStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px4_command::DroneState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px4_command::DroneState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px4_command::DroneState_<ContainerAllocator1> & lhs, const ::px4_command::DroneState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.connected == rhs.connected &&
    lhs.armed == rhs.armed &&
    lhs.mode == rhs.mode &&
    lhs.time_from_start == rhs.time_from_start &&
    lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.attitude == rhs.attitude &&
    lhs.attitude_q == rhs.attitude_q &&
    lhs.attitude_rate == rhs.attitude_rate &&
    lhs.acceleration == rhs.acceleration &&
    lhs.payload_vel == rhs.payload_vel &&
    lhs.payload_pos == rhs.payload_pos &&
    lhs.payload_quaternion == rhs.payload_quaternion &&
    lhs.payload_angular_vel == rhs.payload_angular_vel &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.battery_remaining == rhs.battery_remaining &&
    lhs.mocapOK == rhs.mocapOK;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px4_command::DroneState_<ContainerAllocator1> & lhs, const ::px4_command::DroneState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px4_command

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::px4_command::DroneState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_command::DroneState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_command::DroneState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_command::DroneState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_command::DroneState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_command::DroneState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px4_command::DroneState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c76d09f3b60e8a224df1768813272926";
  }

  static const char* value(const ::px4_command::DroneState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc76d09f3b60e8a22ULL;
  static const uint64_t static_value2 = 0x4df1768813272926ULL;
};

template<class ContainerAllocator>
struct DataType< ::px4_command::DroneState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px4_command/DroneState";
  }

  static const char* value(const ::px4_command::DroneState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px4_command::DroneState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 机载电脑是否连接上飞控，true已连接，false则不是\n"
"bool connected\n"
"## 是否解锁，true为已解锁，false则不是\n"
"bool armed\n"
"## PX4飞控当前飞行模式\n"
"string mode\n"
"\n"
"## 系统启动时间\n"
"float32 time_from_start             ## [s]\n"
"\n"
"## drone position and attitude\n"
"float32  longitude                  ## global position\n"
"float32  latitude                   ## global position\n"
"float32[3] position                 ## [m] local position if in outdoor mode\n"
"float32[3] velocity                 ## [m/s] inertial velocity in ENU\n"
"float32[3] attitude                 ## [rad]\n"
"geometry_msgs/Quaternion attitude_q ## []\n"
"float32[3] attitude_rate            ## [rad/s]\n"
"float32[3] acceleration             ## [m/s^2] defined in body fixed frame\n"
"## payload info from mocap system\n"
"float32[3] payload_vel              ## [m/s]\n"
"float32[3] payload_pos              ## [m]\n"
"float32[4] payload_quaternion       ## []\n"
"float32[3] payload_angular_vel      ## [rad/s]\n"
"## battery status\n"
"float32 battery_voltage             ## [V] \n"
"float32 battery_remaining           ## \n"
"## Flag showing whether the mocap msg has been updated very loop\n"
"bool mocapOK                        \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::px4_command::DroneState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px4_command::DroneState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.connected);
      stream.next(m.armed);
      stream.next(m.mode);
      stream.next(m.time_from_start);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.attitude);
      stream.next(m.attitude_q);
      stream.next(m.attitude_rate);
      stream.next(m.acceleration);
      stream.next(m.payload_vel);
      stream.next(m.payload_pos);
      stream.next(m.payload_quaternion);
      stream.next(m.payload_angular_vel);
      stream.next(m.battery_voltage);
      stream.next(m.battery_remaining);
      stream.next(m.mocapOK);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DroneState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px4_command::DroneState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px4_command::DroneState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connected);
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode);
    s << indent << "time_from_start: ";
    Printer<float>::stream(s, indent + "  ", v.time_from_start);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "attitude[]" << std::endl;
    for (size_t i = 0; i < v.attitude.size(); ++i)
    {
      s << indent << "  attitude[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.attitude[i]);
    }
    s << indent << "attitude_q: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude_q);
    s << indent << "attitude_rate[]" << std::endl;
    for (size_t i = 0; i < v.attitude_rate.size(); ++i)
    {
      s << indent << "  attitude_rate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.attitude_rate[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acceleration[i]);
    }
    s << indent << "payload_vel[]" << std::endl;
    for (size_t i = 0; i < v.payload_vel.size(); ++i)
    {
      s << indent << "  payload_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.payload_vel[i]);
    }
    s << indent << "payload_pos[]" << std::endl;
    for (size_t i = 0; i < v.payload_pos.size(); ++i)
    {
      s << indent << "  payload_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.payload_pos[i]);
    }
    s << indent << "payload_quaternion[]" << std::endl;
    for (size_t i = 0; i < v.payload_quaternion.size(); ++i)
    {
      s << indent << "  payload_quaternion[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.payload_quaternion[i]);
    }
    s << indent << "payload_angular_vel[]" << std::endl;
    for (size_t i = 0; i < v.payload_angular_vel.size(); ++i)
    {
      s << indent << "  payload_angular_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.payload_angular_vel[i]);
    }
    s << indent << "battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "battery_remaining: ";
    Printer<float>::stream(s, indent + "  ", v.battery_remaining);
    s << indent << "mocapOK: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mocapOK);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX4_COMMAND_MESSAGE_DRONESTATE_H
